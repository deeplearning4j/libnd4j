// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ARRAY_ND4J_GRAPH_H_
#define FLATBUFFERS_GENERATED_ARRAY_ND4J_GRAPH_H_

#include "flatbuffers/flatbuffers.h"

namespace nd4j {
namespace graph {

struct FlatArray;

enum DataType {
  DataType_INHERIT = 0,
  DataType_HALF = 1,
  DataType_FLOAT = 2,
  DataType_DOUBLE = 3,
  DataType_INT8 = 4,
  DataType_UINT8 = 5,
  DataType_FLOAT8 = 6,
  DataType_MIN = DataType_INHERIT,
  DataType_MAX = DataType_FLOAT8
};

inline DataType (&EnumValuesDataType())[7] {
  static DataType values[] = {
    DataType_INHERIT,
    DataType_HALF,
    DataType_FLOAT,
    DataType_DOUBLE,
    DataType_INT8,
    DataType_UINT8,
    DataType_FLOAT8
  };
  return values;
}

inline const char **EnumNamesDataType() {
  static const char *names[] = {
    "INHERIT",
    "HALF",
    "FLOAT",
    "DOUBLE",
    "INT8",
    "UINT8",
    "FLOAT8",
    nullptr
  };
  return names;
}

inline const char *EnumNameDataType(DataType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesDataType()[index];
}

struct FlatArray FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DTYPE = 4,
    VT_BUFFER = 6,
    VT_SHAPE = 8
  };
  DataType dtype() const {
    return static_cast<DataType>(GetField<int8_t>(VT_DTYPE, 0));
  }
  const flatbuffers::Vector<int8_t> *buffer() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_BUFFER);
  }
  const flatbuffers::Vector<int32_t> *shape() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_DTYPE) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.Verify(buffer()) &&
           VerifyOffset(verifier, VT_SHAPE) &&
           verifier.Verify(shape()) &&
           verifier.EndTable();
  }
};

struct FlatArrayBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_dtype(DataType dtype) {
    fbb_.AddElement<int8_t>(FlatArray::VT_DTYPE, static_cast<int8_t>(dtype), 0);
  }
  void add_buffer(flatbuffers::Offset<flatbuffers::Vector<int8_t>> buffer) {
    fbb_.AddOffset(FlatArray::VT_BUFFER, buffer);
  }
  void add_shape(flatbuffers::Offset<flatbuffers::Vector<int32_t>> shape) {
    fbb_.AddOffset(FlatArray::VT_SHAPE, shape);
  }
  FlatArrayBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FlatArrayBuilder &operator=(const FlatArrayBuilder &);
  flatbuffers::Offset<FlatArray> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<FlatArray>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlatArray> CreateFlatArray(
    flatbuffers::FlatBufferBuilder &_fbb,
    DataType dtype = DataType_INHERIT,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> buffer = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> shape = 0) {
  FlatArrayBuilder builder_(_fbb);
  builder_.add_shape(shape);
  builder_.add_buffer(buffer);
  builder_.add_dtype(dtype);
  return builder_.Finish();
}

inline flatbuffers::Offset<FlatArray> CreateFlatArrayDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    DataType dtype = DataType_INHERIT,
    const std::vector<int8_t> *buffer = nullptr,
    const std::vector<int32_t> *shape = nullptr) {
  return nd4j::graph::CreateFlatArray(
      _fbb,
      dtype,
      buffer ? _fbb.CreateVector<int8_t>(*buffer) : 0,
      shape ? _fbb.CreateVector<int32_t>(*shape) : 0);
}

}  // namespace graph
}  // namespace nd4j

#endif  // FLATBUFFERS_GENERATED_ARRAY_ND4J_GRAPH_H_
